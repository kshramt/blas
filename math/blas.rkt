#lang racket
(require ffi/vector math/cblas)

(define (SWAP x y)
  (cblas_dswap (f64vector-length x) x 1 y 1))
(define (SCAL a x)
  (cblas_dscal (f64vector-length x) a x 1))
(define (COPY x y)
  (cblas_dcopy (f64vector-length x) x 1 y 1))
(define (AXPY a x y)
  (cblas_daxpy (f64vector-length x) a x 1 y 1))
(define (DOT_ x y)
  (cblas_ddot (f64vector-length x) x 1 y 1))
(define (NRM2 x)
  (cblas_dnrm2 (f64vector-length x) x 1))
(define (ASUM x)
  (cblas_dasum (f64vector-length x) x 1))
(define (IAMX x)
  (cblas_idamax (f64vector-length x) x 1))

(define nonnegative? (not/c negative?))
(define nonnegative-real? (and/c real? nonnegative?))
(provide
  (rename-out
    (make-f64vector   make-vect)
    (f64vector        vect)
    (f64vector?       vect?)
    (f64vector-length vect-length)
    (f64vector-ref    vect-ref)
    (f64vector-set!   vect-set!)
    (list->f64vector  list->vect)
    (f64vector->list  vect->list)
    )
  (contract-out
    (SWAP (-> f64vector? f64vector? void?))
    (SCAL (-> real? f64vector? void?))
    (COPY (-> f64vector? f64vector? void?))
    (AXPY (-> real? f64vector? f64vector? void?))
    (DOT_ (-> f64vector? f64vector? real?))
    (NRM2 (-> f64vector? nonnegative-real?))
    (ASUM (-> f64vector? nonnegative-real?))
    (IAMX (-> f64vector? exact-nonnegative-integer?))
    ))
